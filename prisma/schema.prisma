// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_DEV")
}

model User {
  id              Int             @id @unique @default(autoincrement())
  email           String          @unique
  password        String
  nome            String
  sobrenome       String
  aniversario     DateTime
  peso_init       Float
  peso_now        Float
  peso_target     Float?
  peso_historico  PesoHistorico[]
  altura          Float
  atividade       Activity
  daily           Daily[]
  token           String          @unique
  role            Role            @default(USER)
  regime_calorico RegimeGeral     @default(Leve)
  estrategia      Estrategia      @default(Fixo)
  gender          Gender
  version         Int             @default(1)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
}

model PesoHistorico {
  id         Int      @id @unique @default(autoincrement())
  peso       Float
  data       DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Activity {
  Basal
  Sedentario
  Leve
  Moderado
  Ativo
  Muito_Ativo
  Extremamente_Ativo
}

enum Gender {
  Male
  Female
}

enum RegimeGeral {
  Manter
  Leve
  Moderado
  Extremo
}

enum Estrategia {
  Fixo
  ZigZag_UM
  ZigZag_DOIS
}

model Item {
  id             Int      @id @unique @default(autoincrement())
  alimento       String?
  porcao         String?
  calorias_kcal  Float?
  carboidratos_g Float?
  proteinas_g    Float?
  gorduras_g     Float?
  fibras_g       Float?
  sodio_mg       Float?
  meal           Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId         Int
  fonte          String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Meal {
  id             Int      @id @unique @default(autoincrement())
  alimentos      Item[]
  porcao         String
  calorias_kcal  Float?
  carboidratos_g Float?
  proteinas_g    Float?
  gorduras_g     Float?
  fibras_g       Float?
  sodio_mg       Float?
  daily          Daily    @relation(fields: [dailyId], references: [id])
  dailyId        Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Daily {
  id             Int      @id @unique @default(autoincrement())
  data           DateTime
  meal           Meal[]
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  calorias_total Float    @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Invitation {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String?  @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("invitations")
}
